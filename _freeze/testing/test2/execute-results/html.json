{
  "hash": "c92304595bf172d9b63a7a881819c2f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Credit Card Default\"\nexecute:\n  echo: false\nformat: html\nnavbar: false\nfilters:\n  - pyodide\n---\n\n\n\n\n## A look at the Dataset\n\nThe dataset contains **16983** rows and **26** columns. Each row represents a unique customer, and each column provides specific information about the customer's credit history and balance. Here are 100 example rows:\n\nHere's the dataset:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-53458325014b24627f76\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-53458325014b24627f76\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"],[19273,1538,23871,2253,11652,26730,9728,25621,11885,11345,15269,25063,17331,9986,18290,14962,25917,5110,16042,29968,18433,26696,16717,9164,13477,10591,11708,5943,11543,8767,27016,7356,19408,15289,5408,6062,25640,2660,22724,15282,22618,9723,4541,13266,2053,16211,11515,29622,25863,7128,29276,15508,21561,11018,9265,18557,14339,9692,21546,1523,16057,11712,1367,14098,2401,25359,13875,1512,9155,7530,15288,1834,14759,12290,19614,24215,25994,24547,25400,18355,10270,16884,8562,19121,20503,23191,18315,26632,2371,5930,29923,16056,28282,4632,6168,11466,22972,12408,10966,24374],[360000,120000,300000,140000,130000,50000,120000,70000,120000,180000,120000,130000,30000,480000,500000,30000,120000,300000,50000,50000,250000,80000,430000,230000,250000,50000,150000,300000,30000,20000,180000,70000,360000,300000,410000,150000,50000,50000,280000,290000,160000,360000,180000,300000,140000,20000,200000,20000,70000,500000,80000,270000,50000,50000,10000,200000,170000,130000,70000,90000,50000,150000,260000,50000,180000,400000,180000,20000,490000,180000,20000,60000,350000,80000,160000,80000,470000,120000,350000,130000,50000,290000,80000,240000,210000,340000,20000,100000,210000,50000,150000,200000,320000,20000,500000,30000,280000,270000,80000,50000],[2,2,1,2,2,1,2,2,1,2,2,1,2,2,1,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,1,2,2,2,1,2,2,1,2,2,2,2,2,1,2,2,1,1,2,1,1,1,2,2,2,2,2,2,2,2,2,1,2,1,1,2,2,1,2,2,2,1,1,1,2,1,2,1,2,2,2,1,1,2,1,2,2,1,1,2,1,2,2,2,1,2,2,2,1,1],[1,3,2,2,1,1,2,1,2,3,2,3,1,1,1,3,2,2,3,2,3,2,2,1,1,2,2,2,2,2,2,3,2,1,1,2,2,3,2,1,2,1,2,1,2,2,2,3,1,2,2,2,2,1,1,1,2,1,3,1,2,2,4,2,2,3,2,3,2,3,3,3,1,1,2,1,1,2,1,2,3,1,1,2,3,1,2,3,2,3,2,3,2,2,1,1,2,1,2,1],[2,1,2,1,2,2,2,2,2,1,1,2,2,2,1,2,1,2,1,1,1,1,2,1,2,2,2,1,1,2,1,1,1,2,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,2,1,1,2,2,2,2,1,2,2,2,2,2,2,1,1,2,1,1,2,2,2,2,1,2,1,2,1,1,2,2,1,1,1,1,2,1,1,2,2,1,1,1,2,2,1,2,2,1,2,1],[32,27,27,35,30,24,33,29,26,43,33,54,38,27,69,42,34,39,45,32,27,28,29,44,33,28,24,42,26,27,48,26,37,28,48,36,34,41,35,31,34,34,33,29,42,46,34,43,45,40,26,35,23,23,27,25,26,29,23,27,35,27,42,50,30,26,41,34,34,27,28,24,62,26,30,28,37,39,26,23,36,36,38,34,28,36,31,24,28,54,35,46,36,26,33,24,27,33,36,39],[0,2,0,0,1,0,0,0,0,1,0,2,-2,-1,-2,0,-1,0,0,0,2,0,-2,1,0,0,1,-1,-2,0,0,0,-1,0,0,2,0,2,0,-2,-1,-1,0,-2,-1,0,0,0,1,-1,2,0,1,-1,0,-2,0,-1,0,0,0,0,-1,1,-1,0,0,2,0,-1,-1,0,-1,0,-1,1,-2,-1,-2,-1,0,1,0,0,0,0,2,1,0,0,1,-1,-1,0,1,0,0,0,0,-1],[0,-1,0,0,-2,0,0,0,0,-1,0,0,-2,0,-2,0,-1,0,0,0,3,0,-2,-1,0,0,2,-1,-2,0,0,0,-1,0,0,2,0,2,0,-2,-1,-1,0,-2,-1,0,0,0,1,-1,0,0,-1,-1,0,-2,0,3,0,0,-1,0,-1,1,-1,0,0,0,-1,-1,2,0,-1,0,-1,-1,-2,-1,-2,-1,0,-2,0,0,0,0,2,2,0,0,-2,0,-1,0,-2,0,0,0,0,-1],[0,-1,-1,0,-2,0,0,0,0,-1,0,0,-2,0,-2,2,-2,-2,0,0,2,0,-2,-1,0,0,0,-1,-2,0,0,0,0,0,0,2,0,2,0,-2,-1,-1,0,-2,-1,0,0,0,-1,-1,0,0,0,-1,0,-2,0,2,0,0,0,-1,-1,-2,-1,0,0,0,-1,-1,2,0,-1,0,-1,-1,-2,-1,-2,-2,2,-1,0,0,0,0,2,0,0,0,-2,0,-1,0,-2,0,0,0,0,-1],[0,-1,-1,0,-2,0,0,0,0,-1,0,0,-2,0,-2,0,-2,-2,0,-1,2,0,-2,-1,0,0,0,-1,-2,0,0,0,-1,-1,0,2,0,0,0,-2,-1,-1,0,-2,0,0,0,2,0,-1,0,0,0,-1,2,-2,0,2,-1,0,0,-1,-1,-2,-1,0,0,0,0,-1,2,0,-1,0,-1,-1,-2,-1,-2,-2,0,-1,2,0,0,0,2,0,0,0,-2,0,-1,0,-2,0,0,-2,0,-1],[0,2,0,0,-2,0,0,0,0,-2,0,0,-2,0,-2,0,-2,-2,0,2,0,0,-2,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,2,0,0,0,-2,-1,-1,0,-2,-1,0,0,0,0,0,0,0,0,0,2,-2,0,2,0,0,0,0,-1,-2,-1,0,0,0,0,-1,-1,2,-1,0,-1,-2,-2,-1,-2,-2,0,0,0,-1,0,0,2,0,0,0,-2,0,-1,0,-1,0,0,-1,0,-1],[0,-1,-1,0,-2,0,0,0,0,-2,0,0,-2,0,-2,-1,-2,-2,0,0,0,0,-2,-2,0,0,0,-1,0,0,0,0,-1,-2,-1,2,0,0,0,-2,0,-1,0,-2,-1,0,0,-1,0,-1,0,0,0,-1,0,-2,0,2,0,0,-2,0,-1,-2,-1,0,0,0,-1,-1,-1,0,-1,0,2,-2,-1,-1,-2,-2,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,-1],[290543,390,1726,137692,-915,31292,120411,66330,74831,0,42687,98285,1232,12759,1149,27742,1800,8386,22352,50564,324204,81099,1442,3884,28306,2940,170971,38913,-201,15703,178440,71147,10000,9582,231152,137723,26149,26184,259637,5307,149,8871,153833,22391,176,10640,135654,18100,116630,33179,31740,48465,14191,1050,8128,-3,55658,78,14816,81111,2628,61606,399,36750,220,18256,99925,15736,13955,3898,5741,58819,83393,79565,33712,0,0,30000,0,69,49212,0,39410,77126,58340,183898,17727,100364,187992,16648,-18,154875,396,16385,2907,28885,272507,22604,59189,8086],[118479,390,-9,134899,-915,32766,122717,68278,78082,8016,46640,94075,764,15410,203,31130,0,341,23244,49710,308506,81449,3058,949,20367,3989,165806,319,349,17140,176624,72227,17444,6803,238985,141048,26660,29261,259593,4739,1100,6378,153648,3637,395,11252,173946,17926,-67526,97882,74415,45898,5896,1050,8470,773,48292,78,8237,83081,1000,61950,2101,0,4680,18245,102359,16762,10859,0,5155,59810,10237,78617,14116,47,0,0,0,0,49243,0,41460,59832,58644,185268,18840,97551,193623,16200,-18,140376,396,17518,-110,27924,219510,26906,35690,20993],[112746,390,1974,137477,-915,34426,118886,69181,80333,1200,50865,92857,1909,20116,15183,29105,0,341,20791,0,294198,79887,0,2864,19509,5116,146001,8157,-199,18127,76565,71078,17165,7198,243779,142475,27637,28444,261595,11495,240,26648,145440,1705,1204,12277,176894,19485,71562,48017,56435,46765,6175,974,10255,0,23264,78,-2601,60210,2050,200,577,0,0,18447,96462,17774,57426,715,5754,56566,14580,79229,-2985,207,0,10780,0,0,5112,568,46307,45054,59855,326074,18255,66365,187501,15622,-18,129962,396,19302,-110,27709,217637,0,33984,16653],[102611,780,17648,110865,-915,34725,117170,69494,82497,0,54401,95351,544,10060,3399,58840,0,341,22104,50551,278964,76067,980,933,42394,4425,113907,21228,0,18605,82825,50777,10000,6975,250399,143966,22521,28878,267359,11214,236,6707,140057,-4,700,12287,170754,19503,68709,49403,40620,55438,10000,1224,9389,1107,12346,78,69823,61221,3000,51099,0,0,7500,13574,96846,18125,35554,4079,5150,30627,61024,77858,1472,0,0,0,0,0,48455,16166,45324,39245,61013,276519,20129,62913,167142,14277,-18,124282,596,18818,-310,27457,177535,0,34384,9346],[92290,240,36732,69217,-915,18049,117403,63275,84438,0,57873,95525,390,9301,8311,28840,0,341,22237,40590,270046,73077,0,0,46739,6353,115578,326,199,16351,81763,50841,10000,9356,5194,146736,20533,27655,236734,4084,4022,3450,132260,36581,748,12140,172332,19566,28528,40018,37356,54285,1952,1224,8345,586,28910,78,30446,62636,0,24487,200,0,4100,8805,95549,18507,15858,0,858,30203,86809,79566,2985,0,0,12000,0,0,48456,16726,41887,75742,61097,251815,19528,9389,170910,12930,-18,118956,13386,19052,82690,26848,178337,4448,29340,3424],[51489,630,1000,48018,-1070,19593,117388,57430,86332,0,61917,96980,954,923,-2,1319,0,343,22703,39384,265787,76894,0,0,55573,15829,111863,1518,199,16928,66120,50682,10000,3697,-376,149697,14659,24480,231064,6348,4245,0,110427,332,-784,11990,175960,1320,29171,54109,35091,54198,406,1025,8572,0,13837,-121,29585,54261,0,17624,0,0,0,10501,94131,19063,23033,213,0,28648,177816,74746,1513,0,924,0,0,0,47234,17427,38600,39389,65089,218706,40068,6076,174336,11657,-18,121449,396,9097,84529,26407,180885,5667,21985,13176],[7288,390,2800,5202,0,2000,6300,3049,4000,8016,5000,4300,764,3001,205,4600,0,341,1324,2686,5000,10000,3058,949,10000,1100,39,319,550,2000,8000,3800,17444,1818,12000,7000,2000,3500,10028,4739,1100,6411,7107,4018,395,1185,66022,2000,0,99159,50000,1737,5896,1050,1400,776,5000,0,1000,3500,1000,5000,2101,5000,4686,1300,5024,1284,52280,0,0,3000,10237,3481,14116,47,0,0,0,0,5450,0,3000,5005,2107,60075,1700,107,8500,1588,0,5216,396,1700,9,1459,8533,5000,3007,21012],[6079,390,1983,6405,0,2500,6100,2621,3062,1200,5000,4300,1920,5000,15259,0,0,341,1351,0,6000,5000,0,2873,1504,1205,6000,8157,0,1600,10000,3200,10035,7217,10000,5200,1718,0,12500,11527,240,26987,5002,1809,1204,1600,6101,3000,140043,48276,1796,2000,2006,974,2500,0,1000,0,695,3000,1050,200,577,0,0,1229,4300,1296,57428,715,2294,1768,14580,3000,0,207,0,10780,0,0,0,568,6000,2116,3000,160444,0,2893,8600,1483,0,8000,396,2484,0,1414,8888,0,1503,16653],[6091,780,17652,4819,0,1353,4600,3032,3000,0,5000,7400,544,500,3416,1060,0,341,1664,50551,5000,10000,980,933,25000,2000,3937,21228,199,1030,10000,1950,10000,7023,7250,5300,1210,1100,13106,15537,236,6740,4470,0,0,1000,5898,1200,1830,49450,2126,10000,5074,1300,500,1107,375,0,73820,2600,1000,52399,0,0,7500,1120,3500,647,1068,6942,0,3954,61024,3000,4457,0,0,0,0,0,45554,16166,0,1200,3000,10143,2500,2104,6500,611,0,20000,596,1000,0,952,8006,0,2017,9354],[6227,0,36183,3091,0,1500,5000,2074,2773,0,5000,3600,390,500,8353,1091,0,341,797,0,9600,6500,0,0,10000,2000,4077,326,199,1000,10000,2000,10000,9383,5225,5200,1018,1100,231064,4873,4026,3467,4620,36583,748,243,6053,1000,1021,201,1539,1461,1300,1050,0,586,18785,0,1042,2600,0,5063,200,0,4100,292,4000,672,3000,0,1056,1000,86809,3000,1513,0,0,12000,0,0,2100,1000,2033,75742,2500,7190,0,312,6500,458,0,15653,13386,475,83000,1002,6406,4448,1024,3424],[5055,930,1002,2477,0,2000,4800,2000,3000,0,5000,4000,954,500,0,1319,0,343,825,1600,14000,5000,0,0,10002,10000,4504,1518,0,1000,10000,1828,10000,3714,0,5500,539,2000,15004,26348,1000,0,4346,334,0,240,6288,1400,1103,54379,1807,1492,406,1025,500,0,757,0,1054,3000,1000,1500,0,0,0,2784,4000,864,23033,213,0,1500,177816,3000,0,0,924,0,0,0,1900,1000,5000,0,6000,6283,800,207,6300,403,0,3793,396,363,3000,832,6606,1300,1017,13176],[27486,300,0,100002,0,1501,5000,1800,1899,0,3000,4000,1913,21299,0,565,0,1977,1030,1500,14000,5000,1030,0,5200,1000,23066,47374,3915,1000,3000,2200,0,6546,1436,5200,5001,1000,8004,2306,1000,239400,3800,0,2688,619,8000,0,1011,9905,1715,899,0,1050,2000,0,259,0,1024,1500,0,2200,664,0,4500,270,3650,1506,20225,0,935,1200,82610,1656,1328,0,32673,1000,0,0,2000,1000,1500,62282,8000,5208,792,2004,7900,351,0,10000,396,4000,4561,2698,7006,2443,2000,10868],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>ID<\\/th>\\n      <th>LIMIT_BAL<\\/th>\\n      <th>SEX<\\/th>\\n      <th>EDUCATION<\\/th>\\n      <th>MARRIAGE<\\/th>\\n      <th>AGE<\\/th>\\n      <th>PAY_SEPT<\\/th>\\n      <th>PAY_AUG<\\/th>\\n      <th>PAY_JUL<\\/th>\\n      <th>PAY_JUN<\\/th>\\n      <th>PAY_MAY<\\/th>\\n      <th>PAY_APR<\\/th>\\n      <th>BILL_AMT_SEPT<\\/th>\\n      <th>BILL_AMT_AUG<\\/th>\\n      <th>BILL_AMT_JUL<\\/th>\\n      <th>BILL_AMT_JUN<\\/th>\\n      <th>BILL_AMT_MAY<\\/th>\\n      <th>BILL_AMT_APR<\\/th>\\n      <th>PAY_AMT_SEPT<\\/th>\\n      <th>PAY_AMT_AUG<\\/th>\\n      <th>PAY_AMT_JUL<\\/th>\\n      <th>PAY_AMT_JUN<\\/th>\\n      <th>PAY_AMT_MAY<\\/th>\\n      <th>PAY_AMT_APR<\\/th>\\n      <th>default.payment.next.month<\\/th>\\n      <th>IsDefaulter<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\nThere are 26 columns in the dataset, namely:\n\n- **ID**: ID of each client.\n- **LIMIT_BAL**: Amount of given credit in NT dollars (includes individual and family/supplementary credit).\n- **SEX**: Gender (1 = male, 2 = female).\n- **EDUCATION**: (1 = graduate school, 2 = university, 3 = high school, 0, 4, 5, 6 = others).\n- **MARRIAGE**: Marital status (0 = others, 1 = married, 2 = single, 3 = others).\n- **AGE**: Age in years.\n- **Scale for PAY_SEPT to PAY_APR**: (-2 = No consumption, -1 = paid in full, 0 = use of revolving credit (paid minimum only), 1 = payment delay for one month, 2 = payment delay for two months, ... 8 = payment delay for eight months, 9 = payment delay for nine months and above).\n- **PAY_SEPT**: Repayment status in September 2005 (scale same as above).\n- **PAY_AUG**: Repayment status in August 2005 (scale same as above).\n- **PAY_JUL**: Repayment status in July 2005 (scale same as above).\n- **PAY_JUN**: Repayment status in June 2005 (scale same as above).\n- **PAY_MAY**: Repayment status in May 2005 (scale same as above).\n- **PAY_APR**: Repayment status in April 2005 (scale same as above).\n- **BILL_AMT_SEPT**: Amount of bill statement in September 2005 (NT dollar).\n- **BILL_AMT_AUG**: Amount of bill statement in August 2005 (NT dollar).\n- **BILL_AMT_JUL**: Amount of bill statement in July 2005 (NT dollar).\n- **BILL_AMT_JUN**: Amount of bill statement in June 2005 (NT dollar).\n- **BILL_AMT_MAY**: Amount of bill statement in May 2005 (NT dollar).\n- **BILL_AMT_APR**: Amount of bill statement in April 2005 (NT dollar).\n- **PAY_AMT_SEPT**: Amount of previous payment in September 2005 (NT dollar).\n- **PAY_AMT_AUG**: Amount of previous payment in August 2005 (NT dollar).\n- **PAY_AMT_JUL**: Amount of previous payment in July 2005 (NT dollar).\n- **PAY_AMT_JUN**: Amount of previous payment in June 2005 (NT dollar).\n- **PAY_AMT_MAY**: Amount of previous payment in May 2005 (NT dollar).\n- **PAY_AMT_APR**: Amount of previous payment in April 2005 (NT dollar).\n- **IsDefaulter**: Default payment (1 = yes, 0 = no).\n\n## Exploratory Data Analysis\n\n### Bar Plot\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a categorical column to visualize:\n\n\n\n```{ojs}\ndata = FileAttachment(\"creditcard.csv\").csv({ typed: true })\ncat_columns = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_SEPT',\n               'PAY_AUG', 'PAY_JUL', 'PAY_JUN', 'PAY_MAY', 'PAY_APR', 'IsDefaulter']\nviewof selected_column_cat = Inputs.radio(cat_columns, {value: cat_columns[0]})\n```\n\n\n\n:::\n\n\n\n\n```{ojs}\ngrouped_data = d3.groups(data, d => d[selected_column_cat]).map(([key, values]) => ({key, count: values.length}));\n\nPlot.plot({\n  marks: [\n    Plot.barY(grouped_data, {x: \"key\", y: \"count\", fill: \"steelblue\"}),\n    Plot.text(grouped_data, {x: \"key\", y: \"count\", text: d => d.count, dy: -10})\n  ],\n  x: {\n    label: selected_column_cat\n  },\n  y: {\n    label: \"Count\"\n  },\n  color: {\n    legend: false\n  }\n})\n```\n\n\n\n\n### Histogram\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a continuous column to visualize:\n\n\n\n```{ojs}\ncont_columns = ['LIMIT_BAL', 'AGE', 'BILL_AMT_SEPT', 'BILL_AMT_AUG', 'BILL_AMT_JUL', 'BILL_AMT_JUN', 'BILL_AMT_MAY',\n                'BILL_AMT_APR', 'PAY_AMT_SEPT', 'PAY_AMT_AUG', 'PAY_AMT_JUL', 'PAY_AMT_JUN', 'PAY_AMT_MAY', 'PAY_AMT_APR']\nviewof selected_column = Inputs.radio(cont_columns, {value: 'AGE'})\nviewof bin_count = Inputs.range([1, 50], {step: 1, value: 15, label: \"Number of Bins\"})\n\n```\n\n\n\n:::\n\n\n\n\n\n```{ojs}\nPlot.plot({\n  marks: [\n    Plot.rectY(data, Plot.binX({y: \"count\"}, {x: selected_column, fill: \"steelblue\", thresholds: bin_count}))\n  ],\n  x: {\n    label: selected_column\n  },\n  y: {\n    label: \"Count\"\n  },\n  color: {\n    legend: false\n  }\n})\n```\n\n\n\n\n### Relationship Aanalysis\n\n#### Between Categorical Variable\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a column to compare against IsDefaulter:\n\n\n\n```{ojs}\nbivariate_cat_columns = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_SEPT',\n               'PAY_AUG', 'PAY_JUL', 'PAY_JUN', 'PAY_MAY', 'PAY_APR']\nviewof selected_bivariate_cat_column = Inputs.radio(bivariate_cat_columns, {value: bivariate_cat_columns[0]})\n```\n\n\n\n:::\n\n\n\n\n```{ojs}\nfunction calculateGroupedPercentages(data, groupColumn, stackColumn) {\n  const grouped = d3.rollup(data, v => v.length, d => d[groupColumn], d => d[stackColumn]);\n  const totals = d3.rollup(data, v => v.length, d => d[groupColumn]);\n\n  return Array.from(grouped, ([key, values]) => {\n    const total = totals.get(key);\n    return Array.from(values, ([stackKey, count]) => ({\n      group: key,\n      stack: stackKey,\n      count,\n      percentage: (count / total) * 100\n    }));\n  }).flat();\n}\n\ngrouped_bivariate_data = calculateGroupedPercentages(data, \"IsDefaulter\", selected_bivariate_cat_column);\n\nPlot.plot({\n  marks: [\n    Plot.barY(grouped_bivariate_data, {\n      x: d => d.group + \":\" + d.stack,\n      y: \"percentage\",\n      fill: \"stack\",\n      title: d => `${d.stack}: ${d.percentage.toFixed(1)}%`\n    }),\n    Plot.text(grouped_bivariate_data, {\n      x: d => d.group + \":\" + d.stack,\n      y: d => d.percentage,\n      text: d => `${d.percentage.toFixed(1)}%`,\n      dy: -4\n    })\n  ],\n  x: {\n    label: \"IsDefaulter\",\n    domain: Array.from(new Set(grouped_bivariate_data.map(d => d.group + \":\" + d.stack))),\n    tickFormat: d => d.split(\":\")[0] // Format ticks to show only the group\n  },\n  y: {\n    label: \"Percentage\"\n  },\n  color: {\n    legend: true\n  }\n})\n\n```\n\n\n\n\n#### Between Continuous Variables\n\n::: {.callout-tip appearance=\"simple\"}\nSelect Continuous Variables for Correlation Heatmap:\n\n\n\n```{ojs}\nbivariate_cont_columns =  ['LIMIT_BAL', 'AGE', 'BILL_AMT_SEPT', 'BILL_AMT_AUG', 'BILL_AMT_JUL', 'BILL_AMT_JUN', 'BILL_AMT_MAY',\n                'BILL_AMT_APR', 'PAY_AMT_SEPT', 'PAY_AMT_AUG', 'PAY_AMT_JUL', 'PAY_AMT_JUN', 'PAY_AMT_MAY', 'PAY_AMT_APR']\nviewof selected_bivariate_cont_columns = Inputs.checkbox(bivariate_cont_columns, {value: bivariate_cont_columns})\n```\n\n\n\n:::\n\n\n\n\n\n```{ojs}\nfunction calculateCorrelationMatrix(data, selectedColumns) {\n  const n = selectedColumns.length;\n  const correlationMatrix = Array.from({ length: n }, () => Array(n).fill(0));\n\n  function pearsonCorrelation(x, y) {\n    const meanX = d3.mean(x);\n    const meanY = d3.mean(y);\n    const diffX = x.map(d => d - meanX);\n    const diffY = y.map(d => d - meanY);\n    const numerator = d3.sum(diffX.map((d, i) => d * diffY[i]));\n    const denominator = Math.sqrt(d3.sum(diffX.map(d => d * d)) * d3.sum(diffY.map(d => d * d)));\n    return numerator / denominator;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const col1 = selectedColumns[i];\n      const col2 = selectedColumns[j];\n      const values1 = data.map(d => d[col1]);\n      const values2 = data.map(d => d[col2]);\n      const correlation = pearsonCorrelation(values1, values2);\n      correlationMatrix[i][j] = correlation;\n    }\n  }\n\n  return correlationMatrix;\n}\n\ncorrelation_matrix = calculateCorrelationMatrix(data, selected_bivariate_cont_columns);\ncorrelation_data = selected_bivariate_cont_columns.flatMap((col1, i) =>\n  selected_bivariate_cont_columns.map((col2, j) => ({\n    x: col1,\n    y: col2,\n    value: correlation_matrix[i][j]\n  }))\n);\n\nPlot.plot({\n  marks: [\n    Plot.cell(correlation_data, {x: \"x\", y: \"y\", fill: \"value\", title: d => d.value.toFixed(2)}),\n    Plot.text(correlation_data, {x: \"x\", y: \"y\", text: d => d.value.toFixed(2), dy: 0, textAnchor: \"middle\"})\n  ],\n  x: {\n    domain: selected_bivariate_cont_columns,\n    label: \"Variables\"\n  },\n  y: {\n    domain: selected_bivariate_cont_columns,\n    label: \"Variables\"\n  },\n  color: {\n    type: \"linear\",\n    scheme: \"blues\",\n    label: \"Correlation\"\n  },\n  width: 600,\n  height: 600\n})\n\n```\n\n\n\n\n\n## Checkpoint\n::: {.callout-tip collapse=\"true\" appearance=\"simple\"}\n\n## What's our target variable?\n\nOur Target Variable is the IsDefaulter column. IsDefaulter = 0 indicates customer did not default his/her credit card payment and IsDefaulter = 1 indicates that customer indeed defaulted his/her credit card statement.\n\n:::\n\n\n## Logistic Regression\n\nIn this section, you are tasked to implement a logistic regression to the following data path following the comments in the code block and what we have learnt previously.\n\n```{pyodide-python}\n# importing libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, accuracy_score, recall_score, f1_score, roc_auc_score, confusion_matrix\n\n\ndata_url = \"https://raw.githubusercontent.com/zadchin/econ-module/master/testing/final_creditcard.csv\"\n\n# TODO: read data from data_url, define feature and target\ndata =\n\n# TODO: train-test split\nX_train, X_test, y_train, y_test =\n\n# CHECKPOINT 1: Make sure train-test split print something\nprint(\"X train shape: \", X_train.shape)\nprint(\"X test shape: \", X_test.shape)\n\n# TODO: Define logistic regression model based on function\n\n# TODO: Train the model\n\n# TODO: Test the model\n\n# TODO: Print Result\n```\n\n## Decision Tree\n\n```{pyodide-python}\n\n# TODO: Define deciscion tree model based on function\n\n# TODO: Train the model\n\n# TODO: Test the model\n\n# TODO: Print Result\n```\n\n## Random Forest\n\n```{pyodide-python}\n\n# TODO: Define random forest model based on function\n\n# TODO: Train the model\n\n# TODO: Test the model\n\n# TODO: Print Result\n```\n\n\n## XGBoost\n\n```{pyodide-python}\n\n# TODO: Define XGBoost model based on function\n\n# TODO: Train the model\n\n# TODO: Test the model\n\n# TODO: Print Result\n```\n\n$\\,$",
    "supporting": [
      "test2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.27/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.12.1/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.12.1/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.12.1/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}