{
  "hash": "34124024451ac6f1c4378bd763d2eb36",
  "result": {
    "markdown": "---\ntitle: \"Visualizing the Data\"\nexecute:\n  echo: false\n\n---\n\n\n## Visualization\n\nBefore we begin our analysis on the pancreatic cancer dataset, it is essential to thoroughly understand the dataset. This includes examining the dataset's structure, understanding the predictors, identifying any missing values, and recognizing the significance of each column. This foundational understanding will help us make informed decisions during our analysis and ensure the accuracy and reliability of our findings.\n\n\n## Univariate: Categorial Variables\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a categorical column to visualize:\n\n```{ojs}\ndata = FileAttachment(\"cleaned_dataset.csv\").csv({ typed: true })\ncat_columns = ['patient_cohort', 'diagnosis', 'sex']\nviewof selected_column_cat = Inputs.radio(cat_columns, {value: cat_columns[0]})\n```\n\n:::\n\n\n\n```{ojs}\ngrouped_data = d3.groups(data, d => d[selected_column_cat]).map(([key, values]) => ({key, count: values.length}));\n\nPlot.plot({\n  marks: [\n    Plot.barY(grouped_data, {x: \"key\", y: \"count\", fill: \"steelblue\"}),\n    Plot.text(grouped_data, {x: \"key\", y: \"count\", text: d => d.count, dy: -10})\n  ],\n  x: {\n    label: selected_column_cat\n  },\n  y: {\n    label: \"Count\"\n  },\n  color: {\n    legend: false\n  }\n})\n```\n\n\n\n### What did you observe?\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## What did you observe about patient cohort and sex?\n\nWe see that they are approximately equal amount of female and males, and even though cohort 1 has more patients than cohort 2, there are approximately similar!\n\n:::\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## What did you observe about diagnosis (target variable)?\n\n We see that around 400 patients who does not have cancers, while only approximately 180 patients have cancers! That implies only approximately 30% of our data is pancreatic cancer patients!\n \n **Brain teaser: What impact it might have? **\n \n*Hint: Think about evalaution metrics, and whether it is enough information to train a classifiers!*\n\n:::\n\n## Univariate: Continuous Variables\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a continuous column to visualize:\n\n```{ojs}\ncont_columns = ['age', 'LYVE1', 'REG1B', 'TFF1', 'REG1A', 'creatinine', 'plasma_CA19_9']\nviewof selected_column = Inputs.radio(cont_columns, {value: 'LYVE1'})\nviewof bin_count = Inputs.range([1, 50], {step: 1, value: 15, label: \"Number of Bins\"})\n\n```\n\n:::\n\n\n\n```{ojs}\nPlot.plot({\n  marks: [\n    Plot.rectY(data, Plot.binX({y: \"count\"}, {x: selected_column, fill: \"steelblue\", thresholds: bin_count}))\n  ],\n  x: {\n    label: selected_column\n  },\n  y: {\n    label: \"Count\"\n  },\n  color: {\n    legend: false\n  }\n})\n```\n\n\n## Bivariate: Categorial Variables\n\n::: {.callout-tip appearance=\"simple\"}\nSelect a column to compare against diagnosis:\n\n```{ojs}\nbivariate_cat_columns = ['sex', 'patient_cohort']\nviewof selected_bivariate_cat_column = Inputs.radio(bivariate_cat_columns, {value: bivariate_cat_columns[0]})\n```\n\n:::\n\n\n```{ojs}\nfunction calculateGroupedPercentages(data, groupColumn, stackColumn) {\n  const grouped = d3.rollup(data, v => v.length, d => d[groupColumn], d => d[stackColumn]);\n  const totals = d3.rollup(data, v => v.length, d => d[groupColumn]);\n\n  return Array.from(grouped, ([key, values]) => {\n    const total = totals.get(key);\n    return Array.from(values, ([stackKey, count]) => ({\n      group: key,\n      stack: stackKey,\n      count,\n      percentage: (count / total) * 100\n    }));\n  }).flat();\n}\n\ngrouped_bivariate_data = calculateGroupedPercentages(data, \"diagnosis\", selected_bivariate_cat_column);\n\nPlot.plot({\n  marks: [\n    Plot.barY(grouped_bivariate_data, {\n      x: d => d.group + \":\" + d.stack,\n      y: \"percentage\",\n      fill: \"stack\",\n      title: d => `${d.stack}: ${d.percentage.toFixed(1)}%`\n    }),\n    Plot.text(grouped_bivariate_data, {\n      x: d => d.group + \":\" + d.stack,\n      y: d => d.percentage,\n      text: d => `${d.percentage.toFixed(1)}%`,\n      dy: -4\n    })\n  ],\n  x: {\n    label: \"Diagnosis\",\n    domain: Array.from(new Set(grouped_bivariate_data.map(d => d.group + \":\" + d.stack))),\n    tickFormat: d => d.split(\":\")[0] // Format ticks to show only the group\n  },\n  y: {\n    label: \"Percentage\"\n  },\n  color: {\n    legend: true\n  }\n})\n\n```\n\n\n### What did you observe?\n\n\n## Bivariate: Continuous Variables\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](02_Section_2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n$\\,$\n",
    "supporting": [
      "02_Section_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}