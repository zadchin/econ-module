---
title: "Train-Test Split"
format: html
filters:
  - pyodide
---

## Coding in AI: Quick Breakdown

- **Calling Libraries**: Importing libraries is like visiting a library to borrow tools (functions) you need, such as `import numpy as np` for numerical operations or `import tensorflow as tf` for deep learning.

- **Function Implementation**: This is where you define the specific tasks your code will perform, like training a model or processing data. Functions are reusable blocks of code that perform specific tasks.

- **Other Essentials**:
  - **Constant Assignment**: Setting values that don't change during execution, like learning rates or thresholds (`learning_rate = 0.01`).
  - **Printing/Debugging**: Using print statements to check the output of your code at various stages, ensuring it behaves as expected (`print(model.summary())`).

Moving forward, we will have this framework in mind.

## Brief Outline of AI / Machine Learning

1. Getting Data

2. Analyzing Data, in which we did just now.

3. Train-Test Split

4. Running Baseline

5. Running Model

6. Improve and Iterate

## Train-Test Split

The train-test split is a technique used in AI to divide a dataset into two parts: one for training the model (learning) and one for testing it (evaluating its performance).

::: {.callout-note collapse="true" appearance="simple"}

## Why do you think it's important to test a model on data it hasnâ€™t seen before, rather than just using the training data to evaluate its performance?

Will be released after the section

:::


Here is the code for train-test split:

```{pyodide-python}
## importing libraries
import pandas as pd
from sklearn.model_selection import train_test_split

## calling function from library to read data
data_url = "https://raw.githubusercontent.com/zadchin/econ-module/master/cleaned_loandata.csv"
data = pd.read_csv(data_url)

## constant assigning to determine features & target
features = data.drop("Risk_Flag", axis = 1) 
target = data.Risk_Flag

## calling function from library to train-test split 
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state=42)
print("Train Test Split Completed")
```


$\,$
