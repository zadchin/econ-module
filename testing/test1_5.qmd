---
title: "Challenge 1: Code Playground"
format: html
navbar: false
filters:
  - pyodide
---

## Logistic Regression

In this section, you are tasked to implement a logistic regression to the following data path following the comments in the code block and what we have learnt previously.

```{pyodide-python}
# importing libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_score, accuracy_score, recall_score, f1_score, roc_auc_score, confusion_matrix


data_url = "https://raw.githubusercontent.com/zadchin/RT-test/master/final_dataset.csv"

# TODO: read data from data_url, define feature and target
data =

# TODO: train-test split
X_train, X_test, y_train, y_test =

# CHECKPOINT 1: Make sure train-test split print something
print("X train shape: ", X_train.shape)
print("X test shape: ", X_test.shape)

# TODO: Define logistic regression model based on function

# TODO: Train the model

# TODO: Test the model

# TODO: Print Result
```

## Decision Tree

```{pyodide-python}
# TODO: Define deciscion tree model based on function

# TODO: Train the model

# TODO: Test the model

# TODO: Print Result
```

## Random Forest

```{pyodide-python}
# TODO: Define random forest model based on function

# TODO: Train the model

# TODO: Test the model

# TODO: Print Result
```


## XGBoost

```{pyodide-python}

# TODO: Define XGBoost model based on function

# TODO: Train the model

# TODO: Test the model

# TODO: Print Result
```

## Optional Challenge & Discussion

Here are some optional challenge and questions that you can implements and think about:
- Implement a baseline model to be compared against
- Reimplement all above algorithms and remove class weight. What did you observe
- Think about the difference in the performance of the models. What are the difference and why?

$\,$